Podman Compatibility
====================

Kolla Ansible supports deployments with Podman.  Podman 4.9 renamed
some fields returned by ``podman inspect``.  ``PidMode`` became
``PidNS`` and ``CgroupnsMode`` became ``CgroupNS``.  Kolla Ansible now
accepts either name when comparing containers and passes the correct
``--pid`` and ``--cgroupns`` options to ``podman`` when creating
containers.

When using ``*_extra_volumes`` options, Kolla Ansible will automatically
create any missing host directories referenced by bind mounts with
permissions ``0755`` before starting containers.

Optional systemd management
---------------------------

By default Podman containers are managed directly by Kolla Ansible.
Set ``kolla_podman_use_systemd: true`` in ``/etc/kolla/globals.yml`` to
generate and enable systemd unit files for services. Unit files are
installed as ``/etc/systemd/system/container-<name>.service`` and allow
systemd to start containers during host boot.

Sequential container start
--------------------------

Systemd unit files generated by Podman use the naming pattern
``container-<name>.service``.  The ``service-start-order`` role installs
``After=`` and ``Requires=`` directives for these units so that services
start sequentially according to ``kolla_service_start_priority``. Each
service waits for the previous unit to reach the ``active`` state and, if
a container health check is defined, for that check to succeed. When no
health indicator exists a 30 second delay is applied before continuing.
This ensures dependencies such as databases and messaging back ends are
available before the corresponding API services are launched.

Handler auto-start
------------------

Containers recreated from Ansible handlers now start immediately by
invoking ``podman start`` directly unless ``defer_start: true`` is
specified. These direct starts avoid any reliance on systemd inside the
container. When ``wait: true`` is also passed the handler first ensures
the container is started and then waits for it to reach the running and
healthy state before continuing. Containers started in this way are still
recorded for the final ordered restart phase, which uses systemd when
available to sequence service dependencies.

Troubleshooting
---------------

The final restart sequence relies on systemd unit files when they are
present. If systemd is unavailable or fails to start a unit, Kolla
Ansible retries using ``podman start`` and reports the original systemd
failure along with container logs to aid debugging.

One-shot cleanup containers
---------------------------

Cleanup containers like ``neutron_ovs_cleanup`` are started as normal
services.  They run at boot and create a marker file
``/tmp/kolla/neutron_ovs_cleanup/done`` so subsequent starts skip the
container until the host reboots.
