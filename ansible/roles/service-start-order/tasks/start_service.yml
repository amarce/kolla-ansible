- name: Check neutron_ovs_cleanup marker
  become: true
  stat:
    path: "{{ neutron_ovs_cleanup_marker_file }}"
  register: ovs_cleanup_marker
  when: item == 'neutron_ovs_cleanup'

- name: Check if {{ item }} unit file exists
  become: true
  stat:
    path: "/etc/systemd/system/{{ kolla_service_unit_prefix }}{{ item }}{{ kolla_service_unit_suffix }}.service"
  register: service_unit

- name: Gather {{ item }} container facts
  become: true
  kolla_container_facts:
    action: get_containers
    container_engine: "{{ kolla_container_engine }}"
    name: "{{ item }}"
  register: svc_facts

- name: Evaluate {{ item }} container state
  set_fact:
    svc_running: "{{ (item in svc_facts.containers and svc_facts.containers[item]['State']['Status'] == 'running') | bool }}"
    svc_healthy: "{{ (item in svc_facts.containers and (svc_facts.containers[item]['State']['Health']['Status'] | default('healthy')) == 'healthy') | bool }}"

- name: Stop Podman-started {{ item }} container
  become: true
  command: "podman stop {{ item }}"
  register: podman_stop
  changed_when: podman_stop.rc == 0
  failed_when: podman_stop.rc not in [0, 125]
  when:
    - kolla_container_engine == 'podman'
    - service_unit.stat.exists
    - not (svc_running and svc_healthy)

- name: Start {{ item }} service
  become: true
  block:
    - name: Start {{ item }} via systemd
      systemd:
        name: "{{ kolla_service_unit_prefix }}{{ item }}{{ kolla_service_unit_suffix }}.service"
        state: started
        enabled: true
      register: start_result
      when:
        - item != 'neutron_ovs_cleanup' or not ovs_cleanup_marker.stat.exists | default(false)
        - service_unit.stat.exists
        - not (svc_running and svc_healthy)
  rescue:
    - name: Show {{ item }} service status
      command: "systemctl status {{ kolla_service_unit_prefix }}{{ item }}{{ kolla_service_unit_suffix }}.service"
      register: start_status
      ignore_errors: true
    - name: Show {{ item }} service journal
      command: "journalctl -u {{ kolla_service_unit_prefix }}{{ item }}{{ kolla_service_unit_suffix }}.service -n 100"
      register: start_journal
      ignore_errors: true
    - name: Fail starting {{ item }}
      fail:
        msg: |
          Failed to start {{ item }} service
          Status:
          {{ start_status.stdout | default('') }}
          Journal:
          {{ start_journal.stdout | default('') }}

- name: Wait for {{ item }} to be running and healthy
  become: true
  kolla_container_facts:
    action: get_containers
    container_engine: "{{ kolla_container_engine }}"
    name: "{{ item }}"
  register: svc_health
  retries: "{{ kolla_service_healthcheck_retries }}"
  delay: "{{ kolla_service_healthcheck_delay }}"
  until:
    - svc_health.containers.get(item, {}).get('State', {}).get('Status') == 'running'
    - (svc_health.containers.get(item, {}).get('State', {}).get('Health', {}).get('Status', 'healthy')) == 'healthy'
  when:
    - service_unit.stat.exists
    - not (svc_running and svc_healthy)

- name: Wait for neutron_ovs_cleanup to finish
  become: true
  kolla_container_facts:
    action: get_containers_state
    container_engine: "{{ kolla_container_engine }}"
    name: neutron_ovs_cleanup
  register: cleanup_state
  retries: 12
  delay: 5
  until: cleanup_state.states.neutron_ovs_cleanup != 'running'
  when:
    - item == 'neutron_ovs_cleanup'
    - service_unit.stat.exists
    - not ovs_cleanup_marker.stat.exists | default(false)
    - not (svc_running and svc_healthy)
