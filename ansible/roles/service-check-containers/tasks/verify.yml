---
# Verify that container and systemd unit exist and are active
- name: Init status vars when undefined
  set_fact:
    container_missing: false
    unit_missing_or_disabled: false
    container_needs_recreate: false
  when: container_missing is not defined or unit_missing_or_disabled is not defined
- name: Set container and unit names
  set_fact:
    container_name: "{{ item.value.container_name | default(item.key) }}"
    unit_name: "kolla-{{ item.value.container_name | default(item.key) }}-container.service"
    container_spec: "{{ item.value }}"

- name: Set desired healthcheck test
  set_fact:
    desired_healthcheck_test: "{{ container_spec.healthcheck.test | default([]) }}"

- name: Check container presence
  become: true
  command: >-
    {{ kolla_container_engine }}
    {{ 'container exists ' + container_name if kolla_container_engine == 'podman'
       else 'container inspect ' + container_name }}
  register: container_result
  changed_when: false
  failed_when: false

- name: Inspect container
  become: true
  kolla_container_facts:
    action: get_containers
    container_engine: "{{ kolla_container_engine }}"
    name:
      - "{{ container_name }}"
  register: inspect_result
  when: container_result.rc == 0

- name: Set container_inspect fact
  set_fact:
    container_inspect: >-
      {{ (inspect_result.containers | default({})).get(container_name, {}) }}

- name: Check unit enabled
  become: true
  command: systemctl is-enabled --quiet {{ unit_name }}
  register: unit_enabled_res
  changed_when: false
  failed_when: false

- name: Set unit enabled fact
  set_fact:
    unit_enabled: "{{ unit_enabled_res.rc == 0 }}"

- name: Check unit active
  become: true
  command: systemctl is-active --quiet {{ unit_name }}
  register: unit_active
  changed_when: false
  failed_when: false

- name: Record container and unit status
  set_fact:
    container_missing: "{{ container_result.rc != 0 }}"
    unit_missing_or_disabled: "{{ not unit_enabled }}"
    needs_start: >-
      {{ container_result.rc != 0 or not unit_enabled or unit_active.rc != 0 }}

- name: Detect health-check drift
  set_fact:
    container_needs_recreate: true
  when:
    - not container_missing
    - (container_inspect.Config.Healthcheck.Test | default([]) | to_json)
      != (desired_healthcheck_test | to_json)

- name: Init service fact for handlers
  set_fact:
    service: "{{ container_spec }}"

- name: Clear host error state
  meta: clear_host_errors

- name: Notify recreate handler when needed
  debug:
    msg: "Scheduling container recreation"
  changed_when: true
  when: (container_missing | bool or container_needs_recreate | bool) and unit_enabled | bool
  notify: Recreate container

- name: Notify restart when needed
  debug:
    msg: Notifying restart handler
  changed_when: needs_start | bool and not container_needs_recreate | bool
  notify: "Restart container"
  when: not container_needs_recreate | bool

- name: Flush restart handler
  meta: flush_handlers

- name: Ensure unit running when container exists
  become: true
  systemd:
    name: "{{ unit_name }}"
    state: restarted
    enabled: true
  when:
    - not container_missing
    - unit_active.rc != 0
